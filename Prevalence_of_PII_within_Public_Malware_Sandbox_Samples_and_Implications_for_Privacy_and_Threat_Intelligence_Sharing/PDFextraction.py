from io import StringIO
import os
import re
import csv
import json
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
from pdfminer.pdfdocument import PDFDocument
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.pdfpage import PDFPage
from pdfminer.pdfparser import PDFParser
from datetime import date
from collections import Counter
#**********************************************
#Author: Aaron Weathersby
#Twitter:@T0b0rX0r
#Source: https://github.com/t0b0rX0r
#DOI:
#Paper: Prevalence_of_PII_within_Public_Malware_Sandbox_Samples_and_Implications_for_Privacy_and_Threat_Intelligence_Sharing
#Source Code Snippets borrowed from : 
#Read Directory names of PDF Files https://realpython.com/working-with-files-in-python/#directory-listing-in-modern-python-versions
#Open PDF File 'Snippet from https://pdfminersix.readthedocs.io/en/latest/tutorial/composable.html'
#"REGEX Search
#"If found write to CSV FILENAME & Type Found & Snippet
#"REPEAT until find is read
#"REPEAT for all files in directory
#**********************************************


test="aaron was here aron@alumni.usc.edu"
#,"Metadata_Comments":[],"Metadata_SourceModified":[]
my_dict={"Filename":[],"Metadata":[],"Metadata_Author":[],"Metadata_Company":[],"Metadata_Creator":[],"Metadata_Keywords":[],"Metadata_Producer":[],"Metadata_Comments":[],"Email":[],"Count_Email":[],"SSN":[],"Count_SSN":[],"IPV4":[],"Count_IPV4":[],"CC_Mastercard":[],"Count_CC_Mastercard":[],"CC_Visa":[],"Count_CC_Visa":[],"CC_Amex":[],"Count_CC_Amex":[],"Phone":[],"Count_Phone":[],"Metadata_Email":[],"Metadata_Count_Email":[],"Metadata_SSN":[],"Metadata_Count_SSN":[],"Metadata_IPV4":[],"Metadata_Count_IPV4":[],"Metadata_CC_Mastercard":[],"Metadata_Count_CC_Mastercard":[],"Metadata_CC_Visa":[],"Metadata_Count_CC_Visa":[],"Metadata_CC_Amex":[],"Metadata_Count_CC_Amex":[],"Metadata_Phone":[],"Metadata_Count_Phone":[]}
filename=""
email=""
metadata=""
ssn=""
ipv4=""
cc_mastercard=""
cc_visa=""
cc_amex=""
phone=""
DIR="output_040321"#"output_040221"#"output_040121"#"output_033121"#"output_032921"#"output_032821"#"outputtest"#"output_032821"#"outputtest"
now = date.today()

f = open("/media/sf_ResearchOutput_Share/"+DIR+'ImportedOn_'+now.strftime("%b-%d-%Y")+'.csv', 'w')

with f:
   writer = csv.DictWriter(f, fieldnames=my_dict)
   writer.writeheader()

   with os.scandir(DIR+'/') as entries:
       for entry in entries:
           print("File Name: "+str(entry.name))
           filename=str(entry.name)
           output_string = StringIO()
           with open(DIR+'/'+entry.name, 'rb') as in_file:
               parser = PDFParser(in_file)
               doc = PDFDocument(parser)
               rsrcmgr = PDFResourceManager()
               device = TextConverter(rsrcmgr, output_string, laparams=LAParams())
               interpreter = PDFPageInterpreter(rsrcmgr, device)
               for page in PDFPage.create_pages(doc):
                   interpreter.process_page(page)
               #string=str(doc.info)
#               print(type(doc.info[0]))
#               print("Author: ")
#               if str(doc.info[0]['Author']).replace("b'","'"):
#               print("Author: "+str(doc.info[0]))#['Author']).replace("b'","'"))
               metadata=""
               metadata_author=""
               metadata_company=""
               metadata_creator=""
               metadata_keywords=""
               metadata_producer=""
               metadata_comments=""
               metadata_sourcemodified=""
               metadata_email=""
               metadata_cc_mastercard=""
               metadata_cc_visa=""
               metadata_cc_amex=""
               metadata_phone=""
               metadata_ssn=""
               metadata_ipv4=""
               #print("Debug metadata length (Line 76): ",len(doc.info))
               if len(doc.info) >0:
                  metadata=str(doc.info[0])
               else:
              #    print("Debug Doc Info Type: ",type(doc.info))
                  doc.info.insert(0,"{'NO META DATA DETECTED-AW'}")
                  metadata=str(doc.info[0])
               regex_metadata_email=re.search(r"([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$",metadata)
               print("Debug Regex Metadata Email(line: 78): ",regex_metadata_email)
               regex_metadata_ssn=re.search(r"\b(?!000|666)[0-8][0-9]{2}-(?!00)[0-9]{2}-(?!0000)[0-9]{4}\b",metadata)
               regex_metadata_ipv4=re.search(r"\b\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3}\b",metadata)
               regex_metadata_cc_mastercard=re.search(r"\b(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}\b",metadata)
               regex_metadata_cc_visa=re.search(r"\b([4]\d{3}[\s]\d{4}[\s]\d{4}[\s]\d{4}|[4]\d{3}[-]\d{4}[-]\d{4}[-]\d{4}|[4]\d{3}[.]\d{4}[.]\d{4}[.]\d{4}|[4]\d{3}\d{4}\d{4}\d{4})\b",metadata)
               regex_metadata_cc_amex=re.search(r"\b3[47][0-9]{13}\b",metadata)
               regex_metadata_phone=re.search(r"(?=(?:^(?:\+?1\s*(?:[.-]\s*)?)?(?!(?:(?:.*\(.*)|(?:.*\).*)))(?:[2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))|(?:.*\((?:[2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\).*))(?:\+?1\s*(?:[.-]\s*)?)?(?:\(?([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\)?)\s*(?:[.-]\s*)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d{1,15}))?$",metadata)

               if regex_metadata_email:
                    print ("REGEX Metadata FOUND: EMAIL- "+regex_metadata_email.group())
                    metadata_email=metadata_email+regex_metadata_email.group()+"|"
                    regex_metadata_email=False
               if regex_metadata_ssn:
                    #print ("REGEX Metadata FOUND: SSN- "+regex_metadata_ssn.group())
                    metadata_ssn=metadata_ssn+regex_metadata_ssn.group()+"|"
                    regex_metadata_ssn=False
               if regex_metadata_ipv4:
                    #print ("REGEX Metadata FOUND: IP- "+regex_metadata_ipv4.group())
                    metadata_ipv4=metadata_ipv4+regex_metadata_ipv4.group()+"|"
                    regex_metadata_ipv4=False
               if regex_metadata_cc_mastercard:
                    #print ("REGEX Metadata FOUND: CC Mastercard- "+regex_metadata_cc_mastercard.group())
                    metadata_cc_mastercard=metadata_cc_mastercard+regex_metadata_cc_mastercard.group()+"|"
                    regex_metadata_cc_mastercard=False
               if regex_metadata_cc_visa:
                    #print ("REGEX Metadata FOUND: CC Visa- "+regex_metadata_cc_visa.group())
                    metadata_cc_visa=metadata_cc_visa+regex_metadata_cc_visa.group()+"|"
                    regex_metadata_cc_visa=False
               if regex_metadata_cc_amex:
                    #print ("REGEX Metadata FOUND: CC Amex- "+regex_metadata_cc_amex.group())
                    metadata_cc_amex=metadata_cc_amex+regex_metadata_cc_amex.group()
                    regex_metadata_cc_amex=False
               if regex_metadata_phone:
                    metadata_phone=metadata_phone+regex_metadata_phone.group()+"|"
                    #print ("REGEX Metadata FOUND: Phone- "+regex_metadata_phone.group())
                    regex_metadata_phone=False

               if str(doc.info[0]).find("'Author': b'") > -1:
                    print("Author: ",str(doc.info[0]['Author']).replace("b'","'").replace("'",""))
                    metadata_author=metadata_author+str(doc.info[0]['Author']).replace("b'","'").replace("'","")
               if str(doc.info[0]).find("'Company': b'") > -1:
                    metadata_company=metadata_company+str(doc.info[0]['Company']).replace("b'","'").replace("'","")
          
               if str(doc.info[0]).find("'Keywords': b'") > -1:
                    metadata_keywords=metadata_keywords+str(doc.info[0]['Keywords']).replace("b'","'").replace("'","")
               if str(doc.info[0]).find("'Producer': b'") > -1:
                    metadata_producer=metadata_producer+str(doc.info[0]['Producer']).replace("b'","'").replace("'","")
               if str(doc.info[0]).find("'Company': b'") > -1:
                    metadata_comments=metadata_comments+str(doc.info[0]['Comments']).replace("b'","'").replace("'","")

#               metadata_sourcemodified=metadata_sourcemodified+str(doc.info[0]['SourceModified']).replace("b'","'").replace("'","").replace('"','')
#               print("Source Modified: ",str(doc.info[0]['SourceModified']))#.replace("b'","'").replace("'","").replace('"','')))
#               print("Comments: ",str(doc.info[0]['Comments']))#.replace("b'","'").replace("'","").replace('"','')))
               #print (string)
               #string=string.replace('[','')
               #string=string.replace(']','')
               #string=string.replace("b'","'")
               #print (string)
               #inistring= json.dumps(string)
               #json_decode=json.loads(inistring)
               #print(type(json_decode[0]))
               #print("Document Author:"+json_decode[0]['Author'])
                   #print(output_string.getvalue())
               for sentence in output_string.getvalue().split(" "):
                  regex_email=re.search(r"([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$",sentence)
                  regex_ssn=re.search(r"\b(?!000|666)[0-8][0-9]{2}-(?!00)[0-9]{2}-(?!0000)[0-9]{4}\b",sentence)
                  regex_ipv4=re.search(r"\b\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3}\b",sentence)
                  regex_cc_mastercard=re.search(r"\b(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}\b",sentence)
                  regex_cc_visa=re.search(r"\b([4]\d{3}[\s]\d{4}[\s]\d{4}[\s]\d{4}|[4]\d{3}[-]\d{4}[-]\d{4}[-]\d{4}|[4]\d{3}[.]\d{4}[.]\d{4}[.]\d{4}|[4]\d{3}\d{4}\d{4}\d{4})\b",sentence)
                  regex_cc_amex=re.search(r"\b3[47][0-9]{13}\b",sentence)
                  regex_phone=re.search(r"(?=(?:^(?:\+?1\s*(?:[.-]\s*)?)?(?!(?:(?:.*\(.*)|(?:.*\).*)))(?:[2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))|(?:.*\((?:[2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\).*))(?:\+?1\s*(?:[.-]\s*)?)?(?:\(?([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\)?)\s*(?:[.-]\s*)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d{1,15}))?$",sentence)
                  #regex_ssn=re.search(r"",sentence)
                  #regex_ssn=re.search(r"",sentence)
                  matches=re.search(r'(?:aaronweathersby@alumni.usc.edu)',output_string.getvalue(),flags=0)
                  if regex_email:
                    print ("REGEX FOUND: EMAIL- "+regex_email.group())
                    email=email+regex_email.group()+"|"
                    regex_email=False
                  if regex_ssn:
                    #print ("REGEX FOUND: SSN- "+regex_ssn.group())
                    ssn=ssn+regex_ssn.group()+"|"
                    regex_ssn=False
                  if regex_ipv4:
                    #print ("REGEX FOUND: IP- "+regex_ipv4.group())
                    ipv4=ipv4+regex_ipv4.group()+"|"
                    regex_ipv4=False
                  if regex_cc_mastercard:
                    #print ("REGEX FOUND: CC Mastercard- "+regex_cc_mastercard.group())
                    cc_mastercard=cc_mastercard+regex_cc_mastercard.group()+"|"
                    regex_cc_mastercard=False
                  if regex_cc_visa:
                    #print ("REGEX FOUND: CC Visa- "+regex_cc_visa.group())
                    cc_visa=cc_visa+regex_cc_visa.group()+"|"
                    regex_cc_visa=False
                  if regex_cc_amex:
                    #print ("REGEX FOUND: CC Amex- "+regex_cc_amex.group())
                    cc_amex=cc_amex+regex_cc_amex.group()
                    regex_cc_amex=False
                  if regex_phone:
                    phone=phone+regex_phone.group()+"|"
                    #print ("REGEX FOUND: Phone- "+regex_phone.group())
                    regex_phone=False
               my_dict["Filename"]=filename
               my_dict["Metadata"]=metadata
               my_dict["Metadata_Author"]=metadata_author
               my_dict["Metadata_Company"]=metadata_company
               my_dict["Metadata_Creator"]=metadata_creator
               my_dict["Metadata_Keywords"]=metadata_keywords
               my_dict["Metadata_Producer"]=metadata_producer
               my_dict["Metadata_Comments"]=metadata_comments
#               my_dict["Metadata_SoureModified"]=metadata_sourcemodified

               my_dict["Email"]=email
               list_email=list(filter(None,email.split('|')))
               count_email=Counter(list_email).keys() # note keys will only be unique
               print("Number of Unique Emails: ",len(count_email)) #minus one as split
               my_dict["Count_Email"]=len(count_email)

               my_dict["SSN"]=ssn
               list_ssn=list(filter(None,ssn.split('|')))
               count_ssn=Counter(list_ssn).keys() # note keys will only be unique
               print("Number of Unique SSN: ",len(count_ssn)) #minus one as split
               my_dict["Count_SSN"]=len(count_ssn)


               my_dict["IPV4"]=ipv4
               list_ipv4=list(filter(None,ipv4.split('|')))
               count_ipv4=Counter(list_ipv4).keys() # note keys will only be unique
               print("Number of Unique IPv4: ",len(count_ipv4)) #minus one as split
               my_dict["Count_IPV4"]=len(count_ipv4)
               my_dict["CC_Mastercard"]=cc_mastercard
               list_cc_mastercard=list(filter(None,cc_mastercard.split('|')))
               count_cc_mastercard=Counter(list_cc_mastercard).keys() # note keys will only be unique
               print("Number of Unique MasterCard: ",len(count_cc_mastercard)) #minus one as split
               my_dict["Count_CC_Mastercard"]=len(count_cc_mastercard)
               my_dict["CC_Visa"]=cc_visa
               list_cc_visa=list(filter(None,cc_visa.split('|')))
               count_cc_visa=Counter(list_cc_visa).keys() # note keys will only be unique
               print("Number of Unique cc_visas: ",len(count_cc_visa)) #minus one as split
               my_dict["Count_CC_Visa"]=len(count_cc_visa)

               my_dict["CC_Amex"]=cc_amex
               list_cc_amex=list(filter(None,cc_amex.split('|')))
               count_cc_amex=Counter(list_cc_amex).keys() # note keys will only be unique
               print("Number of Unique cc_amexs: ",len(count_cc_amex)) #minus one as split
               my_dict["Count_CC_Amex"]=len(count_cc_amex)

               my_dict["Phone"]=phone
               list_phone=list(filter(None,phone.split('|')))
               count_phone=Counter(list_phone).keys() # note keys will only be unique
               print("Number of Unique phones: ",len(count_phone)) #minus one as split
               my_dict["Count_Phone"]=len(count_phone)


               my_dict["Metadata_Email"]=metadata_email
               list_metadata_email=list(filter(None,metadata_email.split('|')))
               count_metadata_email=Counter(list_metadata_email).keys() # note keys will only be unique
               print("Number of Unique Metadata_Emails: ",len(count_metadata_email)) #minus one as split
               my_dict["Metadata_Count_Email"]=len(count_metadata_email)
               print("Debug Metadata Count Email Field: ",len(count_metadata_email))

               my_dict["Metadata_SSN"]=metadata_ssn
               list_metadata_ssn=list(filter(None,metadata_ssn.split('|')))
               count_metadata_ssn=Counter(list_metadata_ssn).keys() # note keys will only be unique
               print("Number of Unique Metadata_SSN: ",len(count_metadata_ssn)) #minus one as split
               my_dict["Metadata_Count_SSN"]=len(count_metadata_ssn)


               my_dict["Metadata_IPV4"]=metadata_ipv4
               list_metadata_ipv4=list(filter(None,metadata_ipv4.split('|')))
               count_metadata_ipv4=Counter(list_metadata_ipv4).keys() # note keys will only be unique
               print("Number of Unique Metadata IPv4: ",len(count_metadata_ipv4)) #minus one as split
               my_dict["Metadata_Count_IPV4"]=len(count_metadata_ipv4)

               my_dict["Metadata_CC_Mastercard"]=metadata_cc_mastercard
               list_metadata_cc_mastercard=list(filter(None,metadata_cc_mastercard.split('|')))
               count_metadata_cc_mastercard=Counter(list_metadata_cc_mastercard).keys() # note keys will only be unique
               print("Number of Unique Metadata MasterCard: ",len(count_metadata_cc_mastercard)) #minus one as split
               my_dict["Metadata_Count_CC_Mastercard"]=len(count_metadata_cc_mastercard)

               my_dict["Metadata_CC_Visa"]=metadata_cc_visa
               list_metadata_cc_visa=list(filter(None,metadata_cc_visa.split('|')))
               count_metadata_cc_visa=Counter(list_metadata_cc_visa).keys() # note keys will only be unique
               print("Number of Unique metadata_cc_visas: ",len(count_metadata_cc_visa)) #minus one as split
               my_dict["Metadata_Count_CC_Visa"]=len(count_metadata_cc_visa)

               my_dict["Metadata_CC_Amex"]=metadata_cc_amex
               list_metadata_cc_amex=list(filter(None,metadata_cc_amex.split('|')))
               count_metadata_cc_amex=Counter(list_metadata_cc_amex).keys() # note keys will only be unique
               print("Number of Unique metadata_cc_amexs: ",len(count_metadata_cc_amex)) #minus one as split
               my_dict["Metadata_Count_CC_Amex"]=len(count_metadata_cc_amex)

               my_dict["Metadata_Phone"]=metadata_phone
               list_metadata_phone=list(filter(None,metadata_phone.split('|')))
               count_metadata_phone=Counter(list_metadata_phone).keys() # note keys will only be unique
               print("Number of Unique metadata_phones: ",len(count_metadata_phone)) #minus one as split
               my_dict["Metadata_Count_Phone"]=len(count_metadata_phone)


#               metadata=""360.902.4180
               email=""
               ssn=""
               ipv4=""
               cc_mastercard=""
               cc_visa=""
               cc_amex=""
               phone=""
   

#               print(my_dict)
               writer.writerow(my_dict)
               my_dict.clear()
                  #if regex_email:
                    #print ("REGEX FOUND: EMAIL- "+regex_email.group())
                 #regex_email=False
#               if matches:
#                  print ("REGEX FOUND:"+matches.group())
#                  matches=False   
