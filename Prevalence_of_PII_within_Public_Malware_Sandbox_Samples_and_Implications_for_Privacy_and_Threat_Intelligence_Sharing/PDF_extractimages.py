import fitz # PyMuPDF
import io
from PIL import Image


#from PIL import Image
import pytesseract
import sys
from pdf2image import convert_from_path
import os

import filetype
from io import StringIO

from datetime import date
from collections import Counter
import csv
import re
#**********************************************
#Author: Aaron Weathersby
#Twitter:@T0b0rX0r
#Source: https://github.com/t0b0rX0r
#DOI:
#Paper: Prevalence_of_PII_within_Public_Malware_Sandbox_Samples_and_Implications_for_Privacy_and_Threat_Intelligence_Sharing
#Source Code Snippets borrowed from : #Script Sourcve https://www.thepythoncode.com/article/extract-pdf-images-in-python
#**********************************************

#Working 4/1/21
# Read all file names in a DIR
# Filter for PDF Files
# For Every PDF, Read Each page and look for an image
# If Image exists, write image to DIR
#If Image Exists, OCR the image and write to DIR a text file containing the text


#**************************************
# file path you want to extract images from
#file = "outputtest/testpdf_email3.pdf"
# open the file
DIR="output_032921"#"output_032821"#"output_040121"#"output_033121"#"outputtest"
now = date.today()
filename=""
email=""
metadata=""
ssn=""
ipv4=""
cc_mastercard=""
cc_visa=""
cc_amex=""
phone=""
my_dict={"Filename":[],"Email":[],"Count_Email":[],"SSN":[],"Count_SSN":[],"IPV4":[],"Count_IPV4":[],"CC_Mastercard":[],"Count_CC_Mastercard":[],"CC_Visa":[],"Count_CC_Visa":[],"CC_Amex":[],"Count_CC_Amex":[],"Phone":[],"Count_Phone":[]}
#f = open(DIR+'OCR_ImportedOn_'+now.strftime("%b-%d-%Y")+'.csv', 'w')
f = open("/media/sf_ResearchOutput_Share/"+DIR+'OCR_ImportedOn_'+now.strftime("%b-%d-%Y")+'.csv', 'w')
with f:
	writer = csv.DictWriter(f, fieldnames=my_dict)
	writer.writeheader()


	with os.scandir(DIR+'/') as entries:
		for entry in entries:
			if os.path.isdir(entry):
				print("Directory Found: ",str(entry))
			else:
				print("File Name: "+str(entry.name))
				output_string = StringIO()
				filename=DIR+"/"+str(entry.name)
				ft=filetype.guess(filename)
				print (ft)
				if str(ft).find("filetype.types.archive.Pdf") > -1 :
					print("PDF Found")
					pdf_file = fitz.open(filename)

				# iterate over PDF pages
					for page_index in range(len(pdf_file)):
					# get the page itself
						page = pdf_file[page_index]
						image_list = page.getImageList()
					# printing number of images found in this page
						if image_list:
							print(f"[+] Found a total of {len(image_list)} images in page {page_index}")
						else:
							print("[!] No images found on page", page_index)
						for image_index, img in enumerate(page.getImageList(), start=1):
							# get the XREF of the image
							xref = img[0]
							# extract the image bytes
							base_image = pdf_file.extractImage(xref)
							image_bytes = base_image["image"]
							# get the image extension
							image_ext = base_image["ext"]
							# load it to PIL
							image = Image.open(io.BytesIO(image_bytes))
							# save it to local disk
							image.save(open(f"{DIR}/OCR/{entry.name}-image{page_index+1}_{image_index}.{image_ext}", "wb"))

							#***************************************
							outfile = (DIR+"/OCR/"+entry.name+"-image"+str(page_index+1)+"_"+str(image_index)+".txt")
							f = open(outfile, "a")

							# Iterate from 1 to total number of pages# Import libraries


							# Iterate from 1 to total number of pages
							#for i in range(1, filelimit + 1):

								# Set filename to recognize text from
								# Again, these files will be:
								# page_1.jpg
								# page_2.jpg
								# ....
								# page_n.jpg
							filename = (f"{DIR}/OCR/{entry.name}-image{page_index+1}_{image_index}.{image_ext}")
							print("File Type: ",filetype.guess(filename))
							if str(filetype.guess(filename)).find("Jpx") == -1: #check for jpeg200k...was throwing errors due to unsupported file type
								# Recognize the text as string in image using pytesserct

								text = str(((pytesseract.image_to_string(Image.open(filename)))))
							else:
								text="NO OCR PERFORMED -AW"
								print("Unsupported file type JPX Found...NO OCR PERFORMED")
							print ("**********OCR TEXT************")
	#						print (text)

							for sentence in text.split(" "):
								regex_email=re.search(r"([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$",sentence)
								regex_ssn=re.search(r"\b(?!000|666)[0-8][0-9]{2}-(?!00)[0-9]{2}-(?!0000)[0-9]{4}\b",sentence)
								regex_ipv4=re.search(r"\b\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3}\b",sentence)
								regex_cc_mastercard=re.search(r"\b(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}\b",sentence)
								regex_cc_visa=re.search(r"\b([4]\d{3}[\s]\d{4}[\s]\d{4}[\s]\d{4}|[4]\d{3}[-]\d{4}[-]\d{4}[-]\d{4}|[4]\d{3}[.]\d{4}[.]\d{4}[.]\d{4}|[4]\d{3}\d{4}\d{4}\d{4})\b",sentence)
								regex_cc_amex=re.search(r"\b3[47][0-9]{13}\b",sentence)
								regex_phone=re.search(r"(?=(?:^(?:\+?1\s*(?:[.-]\s*)?)?(?!(?:(?:.*\(.*)|(?:.*\).*)))(?:[2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))|(?:.*\((?:[2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\).*))(?:\+?1\s*(?:[.-]\s*)?)?(?:\(?([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\)?)\s*(?:[.-]\s*)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d{1,15}))?$",sentence)
								#regex_ssn=re.search(r"",sentence)
								#regex_ssn=re.search(r"",sentence)
								matches=re.search(r'(?:aaronweathersby@alumni.usc.edu)',output_string.getvalue(),flags=0)
								if regex_email:
									print ("REGEX FOUND: EMAIL- "+regex_email.group())
									email=email+regex_email.group()+"|"
									regex_email=False
								if regex_ssn:
									print ("REGEX FOUND: SSN- "+regex_ssn.group())
									ssn=ssn+regex_ssn.group()+"|"
									regex_ssn=False
								if regex_ipv4:
									print ("REGEX FOUND: IP- "+regex_ipv4.group())
									ipv4=ipv4+regex_ipv4.group()+"|"
									regex_ipv4=False
								if regex_cc_mastercard:
									print ("REGEX FOUND: CC Mastercard- "+regex_cc_mastercard.group())
									cc_mastercard=cc_mastercard+regex_cc_mastercard.group()+"|"
									regex_cc_mastercard=False
								if regex_cc_visa:
									print ("REGEX FOUND: CC Visa- "+regex_cc_visa.group())
									cc_visa=cc_visa+regex_cc_visa.group()+"|"
									regex_cc_visa=False
								if regex_cc_amex:
									print ("REGEX FOUND: CC Amex- "+regex_cc_amex.group())
									cc_amex=cc_amex+regex_cc_amex.group()
									regex_cc_amex=False
								if regex_phone:
									phone=phone+regex_phone.group()+"|"
									print ("REGEX FOUND: Phone- "+regex_phone.group())
									regex_phone=False
							my_dict["Filename"]=str(entry.name)
							my_dict["Email"]=email
							list_email=list(filter(None,email.split('|')))
							count_email=Counter(list_email).keys() # note keys will only be unique
							print("Number of Unique Emails: ",len(count_email)) #minus one as split
							my_dict["Count_Email"]=len(count_email)

							my_dict["SSN"]=ssn
							list_ssn=list(filter(None,ssn.split('|')))
							count_ssn=Counter(list_ssn).keys() # note keys will only be unique
							print("Number of Unique SSN: ",len(count_ssn)) #minus one as split
							my_dict["Count_SSN"]=len(count_ssn)


							my_dict["IPV4"]=ipv4
							list_ipv4=list(filter(None,ipv4.split('|')))
							count_ipv4=Counter(list_ipv4).keys() # note keys will only be unique
							print("Number of Unique IPv4: ",len(count_ipv4)) #minus one as split
							my_dict["Count_IPV4"]=len(count_ipv4)
							my_dict["CC_Mastercard"]=cc_mastercard
							list_cc_mastercard=list(filter(None,cc_mastercard.split('|')))
							count_cc_mastercard=Counter(list_cc_mastercard).keys() # note keys will only be unique
							print("Number of Unique MasterCard: ",len(count_cc_mastercard)) #minus one as split
							my_dict["Count_CC_Mastercard"]=len(count_cc_mastercard)
							my_dict["CC_Visa"]=cc_visa
							list_cc_visa=list(filter(None,cc_visa.split('|')))
							count_cc_visa=Counter(list_cc_visa).keys() # note keys will only be unique
							print("Number of Unique cc_visas: ",len(count_cc_visa)) #minus one as split
							my_dict["Count_CC_Visa"]=len(count_cc_visa)

							my_dict["CC_Amex"]=cc_amex
							list_cc_amex=list(filter(None,cc_amex.split('|')))
							count_cc_amex=Counter(list_cc_amex).keys() # note keys will only be unique
							print("Number of Unique cc_amexs: ",len(count_cc_amex)) #minus one as split
							my_dict["Count_CC_Amex"]=len(count_cc_amex)

							my_dict["Phone"]=phone
							list_phone=list(filter(None,phone.split('|')))
							count_phone=Counter(list_phone).keys() # note keys will only be unique
							print("Number of Unique phones: ",len(count_phone)) #minus one as split
							my_dict["Count_Phone"]=len(count_phone)
							email=""
							ssn=""
							ipv4=""
							cc_mastercard=""
							cc_visa=""
							cc_amex=""
							phone=""


							#               print(my_dict)
							writer.writerow(my_dict)
							my_dict.clear()
							print ("**********OCR TEXT-END************")
							# The recognized text is stored in variable text
							# Any string processing may be applied on text
							# Here, basic formatting has been done:
							# In many PDFs, at line ending, if a word can't
							# be written fully, a 'hyphen' is added.
							# The rest of the word is written in the next line
							# Eg: This is a sample text this word here GeeksF-
							# orGeeks is half on first line, remaining on next.
							# To remove this, we replace every '-\n' to ''.
							
							text = text.replace('-\n', '')	

							# Finally, write the processed text to the file.
							f.write(text)

							# Close the file after writing all the text.
							f.close()
